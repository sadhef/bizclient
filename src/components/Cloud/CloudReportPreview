import React, { useRef } from 'react';
import { FiPrinter, FiArrowLeft } from 'react-icons/fi';
import { useHistory } from 'react-router-dom';
import { useTheme } from '../../context/ThemeContext';

const CloudReportPreviewComponent = ({ reportData }) => {
  const { reportTitle, reportDates, columns, rows } = reportData;
  const history = useHistory();
  const { isDark } = useTheme();
  const printRef = useRef();

  const handlePrint = () => {
    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
      <!DOCTYPE html>
      <html>
      <head>
        <title>${reportTitle || 'Cloud Status Report'}</title>
        <style>
          body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            color: #000;
          }
          .report-header {
            text-align: center;
            margin-bottom: 20px;
            border-bottom: 1px solid #000;
            padding-bottom: 10px;
          }
          .report-title {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 5px;
          }
          .report-date {
            font-size: 16px;
            margin-bottom: 10px;
          }
          .report-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
          }
          .report-table th, .report-table td {
            border: 1px solid #000;
            padding: 8px;
            text-align: left;
          }
          .report-table th {
            background-color: #f2f2f2;
            font-weight: bold;
            text-transform: uppercase;
          }
          .report-footer {
            text-align: center;
            margin-top: 20px;
            font-size: 12px;
            color: #555;
          }
          .status-na {
            background-color: #e0e7ff;
            color: #4338ca;
            padding: 2px 6px;
            border-radius: 4px;
            font-weight: bold;
            display: inline-block;
          }
          .status-failed {
            background-color: #fee2e2;
            color: #b91c1c;
            padding: 2px 6px;
            border-radius: 4px;
            font-weight: bold;
            display: inline-block;
          }
          @page {
            size: A4 landscape;
            margin: 15mm;
          }
        </style>
      </head>
      <body>
        <div class="report-header">
          <div class="report-title">${reportTitle || 'Cloud Status Report'}</div>
          <div class="report-date">${formatPrintDate(reportDates?.startDate)} - ${formatPrintDate(reportDates?.endDate)}</div>
        </div>
        
        <table class="report-table">
          <thead>
            <tr>
              ${columns.map(col => `<th>${col}</th>`).join('')}
            </tr>
          </thead>
          <tbody>
            ${rows.map(row => `
              <tr>
                ${columns.map(col => `
                  <td>
                    ${getStatusCell(row[col] || 'N/A')}
                  </td>
                `).join('')}
              </tr>
            `).join('')}
          </tbody>
        </table>
        
        <div class="report-footer">
          Generated on ${new Date().toLocaleString()}
        </div>
        
        <script>
          window.onload = function() {
            setTimeout(function() {
              window.print();
              window.close();
            }, 100);
          };
        </script>
      </body>
      </html>
    `);
    printWindow.document.close();
  };

  const formatPrintDate = (dateString) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleDateString('en-GB', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });
  };

  const getStatusCell = (value) => {
    const status = String(value).toUpperCase().trim();
    if (status === 'N/A') {
      return `<span class="status-na">${status}</span>`;
    } else if (status === 'FAILED') {
      return `<span class="status-failed">${status}</span>`;
    }
    return status;
  };

  const handleBackToEdit = () => {
    history.push('/cloud-dashboard');
  };

  return (
    <div className={`min-h-screen ${isDark ? 'bg-gray-900' : 'bg-gray-50'} py-6`}>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mb-6">
        <div className="flex flex-wrap justify-between items-center mb-4">
          <div className="flex items-center space-x-4">
            <button
              onClick={handleBackToEdit}
              className={`inline-flex items-center px-3 py-2 border rounded-md shadow-sm text-sm font-medium ${
                isDark
                  ? 'border-gray-600 text-gray-300 bg-gray-800 hover:bg-gray-700'
                  : 'border-gray-300 text-gray-700 bg-white hover:bg-gray-50'
              }`}
            >
              <FiArrowLeft className="mr-2" />
              Back to Edit
            </button>
            <button
              onClick={handlePrint}
              className="inline-flex items-center px-3 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              <FiPrinter className="mr-2" />
              Print Report
            </button>
          </div>
          <div className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
            Preview Mode
          </div>
        </div>
      </div>
      
      {/* This is just for preview, not printed */}
      <div 
        ref={printRef}
        className={`max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 ${
          isDark ? 'bg-gray-800 text-white' : 'bg-white text-gray-900'
        } shadow-lg rounded-lg overflow-hidden`}
      >
        <div className="py-6 px-4 sm:px-6 border-b">
          <h1 className="text-3xl font-bold text-center">{reportTitle || 'Cloud Status Report'}</h1>
          <p className="text-center mt-2">
            {reportDates?.startDate && reportDates?.endDate 
              ? `${formatPrintDate(reportDates.startDate)} - ${formatPrintDate(reportDates.endDate)}`
              : 'Date range not specified'
            }
          </p>
        </div>
        
        <div className="p-4 sm:p-6 overflow-x-auto">
          <table className="min-w-full divide-y">
            <thead className={isDark ? 'bg-gray-700' : 'bg-gray-50'}>
              <tr>
                {columns.map((column, index) => (
                  <th 
                    key={index}
                    className={`px-6 py-3 text-left text-xs font-medium ${
                      isDark ? 'text-gray-300' : 'text-gray-500'
                    } uppercase tracking-wider`}
                  >
                    {column}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody className={`${isDark ? 'divide-gray-700' : 'divide-gray-200'} divide-y`}>
              {rows.map((row, rowIndex) => (
                <tr key={rowIndex} className={isDark ? 'hover:bg-gray-700' : 'hover:bg-gray-50'}>
                  {columns.map((column, colIndex) => {
                    const cellValue = row[column] || 'N/A';
                    return (
                      <td 
                        key={colIndex} 
                        className={`px-6 py-4 whitespace-nowrap ${
                          isDark ? 'text-gray-200' : 'text-gray-900'
                        }`}
                      >
                        {getStatusCell(cellValue)}
                      </td>
                    );
                  })}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        
        <div className="py-4 px-6 border-t text-center">
          <p className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
            Generated on {new Date().toLocaleString()}
          </p>
        </div>
      </div>
    </div>
  );
};

export default CloudReportPreview;